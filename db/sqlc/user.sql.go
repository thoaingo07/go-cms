// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.13.0
// source: user.sql

package db

import (
	"context"
	"database/sql"

	"github.com/google/uuid"
	"github.com/lib/pq"
)

const addUser = `-- name: AddUser :one
INSERT INTO public.user(
	id, sys_tenant_id, unique_id, handle_id, first_name, last_name, is_active, email, phone, password, roles, last_accessed_at, created_date, created_by, created_by_name, updated_date, updated_by, updated_by_name)
	VALUES ($1, $2, $3, $4, $5, $6, $7, $8, $9, $10, $11, $12, $13, $14, $15, $16, $17, $18)
RETURNING id, sys_tenant_id, unique_id, handle_id, first_name, last_name, is_active, email, phone, password, roles, last_accessed_at, created_date, created_by, created_by_name, updated_date, updated_by, updated_by_name
`

type AddUserParams struct {
	ID             int32          `json:"id"`
	SysTenantID    int32          `json:"sys_tenant_id"`
	UniqueID       uuid.NullUUID  `json:"unique_id"`
	HandleID       sql.NullString `json:"handle_id"`
	FirstName      sql.NullString `json:"first_name"`
	LastName       sql.NullString `json:"last_name"`
	IsActive       sql.NullBool   `json:"is_active"`
	Email          sql.NullString `json:"email"`
	Phone          sql.NullString `json:"phone"`
	Password       sql.NullString `json:"password"`
	Roles          []string       `json:"roles"`
	LastAccessedAt sql.NullTime   `json:"last_accessed_at"`
	CreatedDate    sql.NullTime   `json:"created_date"`
	CreatedBy      sql.NullInt32  `json:"created_by"`
	CreatedByName  sql.NullString `json:"created_by_name"`
	UpdatedDate    sql.NullTime   `json:"updated_date"`
	UpdatedBy      sql.NullInt32  `json:"updated_by"`
	UpdatedByName  sql.NullString `json:"updated_by_name"`
}

func (q *Queries) AddUser(ctx context.Context, arg AddUserParams) (User, error) {
	row := q.db.QueryRowContext(ctx, addUser,
		arg.ID,
		arg.SysTenantID,
		arg.UniqueID,
		arg.HandleID,
		arg.FirstName,
		arg.LastName,
		arg.IsActive,
		arg.Email,
		arg.Phone,
		arg.Password,
		pq.Array(arg.Roles),
		arg.LastAccessedAt,
		arg.CreatedDate,
		arg.CreatedBy,
		arg.CreatedByName,
		arg.UpdatedDate,
		arg.UpdatedBy,
		arg.UpdatedByName,
	)
	var i User
	err := row.Scan(
		&i.ID,
		&i.SysTenantID,
		&i.UniqueID,
		&i.HandleID,
		&i.FirstName,
		&i.LastName,
		&i.IsActive,
		&i.Email,
		&i.Phone,
		&i.Password,
		pq.Array(&i.Roles),
		&i.LastAccessedAt,
		&i.CreatedDate,
		&i.CreatedBy,
		&i.CreatedByName,
		&i.UpdatedDate,
		&i.UpdatedBy,
		&i.UpdatedByName,
	)
	return i, err
}

const deleteUser = `-- name: DeleteUser :exec
delete from public.user
where sys_tenant_id = $1 and id = $2
`

type DeleteUserParams struct {
	SysTenantID int32 `json:"sys_tenant_id"`
	ID          int32 `json:"id"`
}

func (q *Queries) DeleteUser(ctx context.Context, arg DeleteUserParams) error {
	_, err := q.db.ExecContext(ctx, deleteUser, arg.SysTenantID, arg.ID)
	return err
}

const getUser = `-- name: GetUser :one
select id, sys_tenant_id, unique_id, handle_id, first_name, last_name, is_active, email, phone, password, roles, last_accessed_at, created_date, created_by, created_by_name, updated_date, updated_by, updated_by_name from public.user
where sys_tenant_id = $1 and id = $2 limit 1
`

type GetUserParams struct {
	SysTenantID int32 `json:"sys_tenant_id"`
	ID          int32 `json:"id"`
}

func (q *Queries) GetUser(ctx context.Context, arg GetUserParams) (User, error) {
	row := q.db.QueryRowContext(ctx, getUser, arg.SysTenantID, arg.ID)
	var i User
	err := row.Scan(
		&i.ID,
		&i.SysTenantID,
		&i.UniqueID,
		&i.HandleID,
		&i.FirstName,
		&i.LastName,
		&i.IsActive,
		&i.Email,
		&i.Phone,
		&i.Password,
		pq.Array(&i.Roles),
		&i.LastAccessedAt,
		&i.CreatedDate,
		&i.CreatedBy,
		&i.CreatedByName,
		&i.UpdatedDate,
		&i.UpdatedBy,
		&i.UpdatedByName,
	)
	return i, err
}

const getUsers = `-- name: GetUsers :many
select id, sys_tenant_id, unique_id, handle_id, first_name, last_name, is_active, email, phone, password, roles, last_accessed_at, created_date, created_by, created_by_name, updated_date, updated_by, updated_by_name from public.user
where sys_tenant_id = $1
order by first_name, last_name
limit $2 offset $3
`

type GetUsersParams struct {
	SysTenantID int32 `json:"sys_tenant_id"`
	Limit       int32 `json:"limit"`
	Offset      int32 `json:"offset"`
}

func (q *Queries) GetUsers(ctx context.Context, arg GetUsersParams) ([]User, error) {
	rows, err := q.db.QueryContext(ctx, getUsers, arg.SysTenantID, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []User{}
	for rows.Next() {
		var i User
		if err := rows.Scan(
			&i.ID,
			&i.SysTenantID,
			&i.UniqueID,
			&i.HandleID,
			&i.FirstName,
			&i.LastName,
			&i.IsActive,
			&i.Email,
			&i.Phone,
			&i.Password,
			pq.Array(&i.Roles),
			&i.LastAccessedAt,
			&i.CreatedDate,
			&i.CreatedBy,
			&i.CreatedByName,
			&i.UpdatedDate,
			&i.UpdatedBy,
			&i.UpdatedByName,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updatePassword = `-- name: UpdatePassword :exec
update public.user
set password = $1
where sys_tenant_id = $2 and id = $3
`

type UpdatePasswordParams struct {
	Password    sql.NullString `json:"password"`
	SysTenantID int32          `json:"sys_tenant_id"`
	ID          int32          `json:"id"`
}

func (q *Queries) UpdatePassword(ctx context.Context, arg UpdatePasswordParams) error {
	_, err := q.db.ExecContext(ctx, updatePassword, arg.Password, arg.SysTenantID, arg.ID)
	return err
}
